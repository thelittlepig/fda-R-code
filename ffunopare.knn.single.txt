ffunopare.knn.single <- function(RESPONSES, CURVES, PRED, neighbour,..., kind.of.kernel = "quadratic", semimetric = "deriv")
{
################################################################
# Performs functional nonparametric prediction (regression) when both  
# the response and the predictor are random curves via the functional kernel estimator. 
# A global kNN bandwidth is given by the user
#    "RESPONSES" matrix containing the response curves (row by row) 
#    "CURVES" matrix containing the explanatory curves dataset (row by row) 
#             used for the estimating stage
#    "PRED" matrix containing new curves stored row by row
#           used for computing predictions
#    "neighbour" number of nearest neighbours used by the estimator
#    "..." arguments needed for the call of the function computing 
#          the semi-metric between curves
#    "kind.of.kernel" the kernel function used for computing of 
#                     the kernel estimator; you can choose 
#                     "indicator", "triangle" or "quadratic (default)
#    "semimetric" character string allowing to choose the function 
#                 computing the semimetric;  you can select 
#                 "deriv" (default), "fourier", "hshift" and "pca"
# Returns a list containing:
#    "Predicted.values" if PRED different from CURVES, this vector 
#    "knn" number of neighbours
################################################################
        if(is.vector(RESPONSES)) RESPONSES <- as.matrix(RESPONSES)
	if(is.vector(PRED)) PRED <- as.matrix(t(PRED))
	sm <- get(paste("semimetric.", semimetric, sep = ""))
	if(semimetric == "mplsr") stop("semimetric option mlpsr not allowed!")
        SEMIMETRIC2 <- sm(CURVES, PRED, ...)
	kernel <- get(kind.of.kernel)
	p2 <- ncol(SEMIMETRIC2)
        bandwidth.knn2 <- 0
        for(j in 1:p2) {
              Sem <- SEMIMETRIC2[, j]
              knn.to.band <- Sem[order(Sem)[neighbour:(neighbour + 1)]]
              bandwidth.knn2[j] <- 0.5 * sum(knn.to.band)
        }
        KERNEL2 <- kernel(t(t(SEMIMETRIC2)/bandwidth.knn2))
        KERNEL2[KERNEL2 < 0] <- 0
        KERNEL2[KERNEL2 > 1] <- 0
        Denom2 <- apply(KERNEL2, 2, sum)
	NUM2 <- t(KERNEL2) %*% RESPONSES
        RESPONSES.predicted <- NUM2/Denom2
	return(list(Predicted.values = RESPONSES.predicted, knn=neighbour))
}