funopare.mode.lcv <- function(Response, CURVES, PRED, ..., Knearest = NULL, kind.of.kernel = "quadratic", semimetric = "deriv")
{
################################################################
# Performs functional prediction of a scalar response from a 
# sample of curves by computing the functional conditional mode. 
# A local bandwidth (i.e. local number of neighbours) is selected 
# by a ``trivial'' cross-validation procedure.
#    "Response" vector containing the observations of the scalar 
#               response
#    "CURVES" matrix containing the curves dataset (row by row) 
#             used for the estimating stage
#    "PRED" matrix containing new curves stored row by row
#           used for computing predictions
#    "..." arguments needed for the call of the function computing 
#          the semi-metric between curves
#    "Knearest"  vector giving the the sequence of successive authorized 
#                integers for the smoothing parameters. By default 
#                (i.e. Knearest=NULL), the vector Knearest contains a 
#                sequence of 10 integers taking into account card(I1).
#    "kind.of.kernel" the kernel function used for computing of 
#                     the kernel estimator; you can choose 
#                     "indicator", "triangle" or "quadratic (default)
#    "semimetric" character string allowing to choose the function 
#                 computing the semimetric;  you can select 
#                 "deriv" (default), "fourier", "hshift", "mplsr", 
#                 and "pca"
# Returns a list containing:
#    "Estimated.values" vector containing estimated reponses for 
#                        each curve of "CURVES"
#    "Predicted.values" if PRED different from CURVES, this vector 
#                       contains predicted responses for each 
#                       curve of PRED
#    "Response.values"  vector of length card(I2) such that, for all 
#                       i in the set I2, Response.values[i]=yi 
#                       (i.e. observed responses corresponding to the 
#                       second learning subsample).
#    "Mse" mean squared error between estimated values and 
#          observed values
################################################################
        Response <- as.vector(Response)
	if(is.vector(PRED)) PRED <- as.matrix(t(PRED))
	testfordim <- sum(dim(CURVES)==dim(PRED))==2
	twodatasets <- T
	if(testfordim) twodatasets <- sum(CURVES==PRED)!=prod(dim(CURVES))
	sm <- get(paste("semimetric.", semimetric, sep = ""))
	kernel <- get(kind.of.kernel)
	llearn <- nrow(CURVES)
	Learn1 <- seq(2, llearn, by=2)
	llearn1 <- length(Learn1)
	LEARN1 <- CURVES[Learn1,  ]
	LEARN2 <- CURVES[ - Learn1,  ]
	if(semimetric == "mplsr"){
		SMLEARN1 <- sm(Response, LEARN1, LEARN1, ...)
		SMLEARN12 <- sm(Response, LEARN1, LEARN2, ...)
	} else {
		SMLEARN1 <- sm(LEARN1, LEARN1, ...)
		SMLEARN12 <- sm(LEARN1, LEARN2, ...)
	}
	SML12.SOR <- apply(SMLEARN12, 2, sort)
	Resp1 <- Response[Learn1]
	Resp2 <- Response[ - Learn1]
	Resp.range <- range(Response)
	Response.grid <- seq(from = Resp.range[1] * 0.9, to = Resp.range[2] * 
		1.1, length = 100)	
	# RESPMETRIC[i,j]=yi-yj with i in Response.grid and j in LEARN1 
	RESPMETRIC <- outer(Response.grid, Resp1, "-")
	RESPMET.SOR <- t(apply(abs(RESPMETRIC), 1, sort))
	llearn2 <- nrow(LEARN2)
	lgrid <- length(Response.grid)
	if(is.null(Knearest)) {
		Knearest.min <- max(ceiling(llearn1 * 0.05), 10)
		Knearest.max <- ceiling(llearn1 * 0.25)
                if(Knearest.max <= Knearest.min){
                        Knearest.min <- ceiling(llearn1 * 0.05)
                }
		step <- ceiling((Knearest.max - Knearest.min)/10)
		Knearest <- seq(Knearest.min, Knearest.max, by = step)
	}
	lknearest <- length(Knearest)
	BANDL12.CUR <- 0.5 * (SML12.SOR[Knearest,  ] + SML12.SOR[Knearest + 1,  
		])
	BAND.RESP <- 0.5 * (RESPMET.SOR[, Knearest] + RESPMET.SOR[, Knearest + 
		1])
	CV <- matrix(0, nrow = lknearest^2, ncol = llearn2)
	MODE <- matrix(0, nrow = lknearest^2, ncol = llearn2)
	count1 <- 0
	count2 <- 0
	for(kk in Knearest) {
		count2 <- count2 + 1
		ARG <- t(t(SMLEARN12)/BANDL12.CUR[count2,  ])
		KERNEL.CURVES <- kernel(ARG)
		KERNEL.CURVES[KERNEL.CURVES < 0] <- 0
		KERNEL.CURVES[KERNEL.CURVES > 1] <- 0
		Denom <- apply(KERNEL.CURVES, 2, sum)
		count3 <- 0
		for(hh in Knearest) {
			count1 <- count1 + 1
			count3 <- count3 + 1
			KERNEL.RESP <- apply(abs(RESPMETRIC)/BAND.RESP[, count3
				], 1, kernel)
			KERNEL.RESP[KERNEL.RESP < 0] <- 0
			KERNEL.RESP[KERNEL.RESP > 1] <- 0
			DENSITY.ESTIMATE <- (t(KERNEL.CURVES)/Denom) %*% (
				KERNEL.RESP/BAND.RESP[, count3])
			Ind.mode <- apply(DENSITY.ESTIMATE, 1, order)[lgrid,  ]
			MODE[count1,  ] <- Response.grid[Ind.mode]
			CV[count1,  ] <- (Resp2 - MODE[count1,  ])^2
		}
	}
	Ind.knearest.opt <- apply(CV, 2, order)[1,  ]
	IND.OPT <- cbind(Ind.knearest.opt, 1:llearn2)
	Response.estimated <- MODE[IND.OPT]
	Mse.estimated <- sum(CV[IND.OPT])/llearn2
	if(twodatasets) {
		if(semimetric == "mplsr")
			SMLEARN2NEW <- sm(Response, LEARN2, PRED, ...)
		else SMLEARN2NEW <- sm(LEARN2, PRED, ...)
		Order.new <- apply(SMLEARN2NEW, 2, order)[1,  ]
		Response.predicted <- Response.estimated[Order.new]
		return(list(Estimated.values = Response.estimated, 
			Predicted.values = Response.predicted, Response.values
			 = Resp2, Mse = Mse.estimated))
	}
	else {
		return(list(Estimated.values = Response.estimated, 
			Response.values = Resp2, Mse = Mse.estimated))
	}
}