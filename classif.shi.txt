classif.shi <- function(CURVES, SEMIMETRIC, kind.of.kernel, bw, Group, nss, semimetric, centrality,...)
{
#####################################################################
# Returns the "Subsampling Heterogeneity Index (SHI)" of the class
# defined by the vector "Group" of the curves dataset "CURVES":
#   "CURVES" matrix containing the curves dataset (row by row)
#   "SEMIMETRIC" matrix containing the proximities between curves
#   "bw"     is a selected bandwidth (see function "classif.bw")
#   "Group"  gives the unit numbers of the concerned class
#   "nss"    is the fixed Number of SubSamples created for 
#            computing SHI
#   "semimetric" gives the semimetric type required
#            (see functions "semimetric.deriv", "semimetric.pca",...)
#   "centrality": character string giving the centrality feature 
#            compared with the mode (centrality="mean" or "median").
#   "..."    arguments for defining the used semimetric
# Returns the value of SHI for the class defined by "Group"
#####################################################################
        lg <- length(Group)
        size <- ceiling(lg/2)
        Hetero.index <- 0
        sm <- get(paste("semimetric.", semimetric, sep = ""))
        p <- ncol(CURVES)
        for(e in 1:nss){
                Sample <- sort(sample(Group,size))
                SM.SAMPLE <- SEMIMETRIC[Sample, Sample]
                rank.mode <- funopa.mode(bw, SM.SAMPLE, kind.of.kernel)
                Modal.curve <- CURVES[Sample[rank.mode],]
                if(centrality=="mean") Centrality.feature <- apply(CURVES[Sample, ], 2, sum)/lg                
                if(centrality=="median") Centrality.feature <- median.npfda(SEMIMETRIC[Sample, Sample])
                MM0 <- rbind(Modal.curve, Centrality.feature, rep(0, p))
                SM.MM0 <- sm(MM0, MM0, ...)
                Hetero.index[e] <- SM.MM0[1,2]/(SM.MM0[1,3]+SM.MM0[2,3])
        }
        return(sum(Hetero.index)/nss)
}