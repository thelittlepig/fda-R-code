funopare.kernel <- function(Response, CURVES, PRED, bandwidth, ..., kind.of.kernel = "quadratic", semimetric = "deriv")
{
################################################################
# Performs functional prediction (regression) of a scalar response 
# from a sample of curves via the functional kernel estimator. 
# A global bandwidth is considered  without automatic selection. 
#    "Response" vector containing the observations of the scalar 
#               response
#    "CURVES" matrix containing the curves dataset (row by row) 
#             used for the estimating stage
#    "PRED" matrix containing new curves stored row by row
#           used for computing predictions
#    "bandwidth" the value of the bandwidth
#    "..." arguments needed for the call of the function computing 
#          the semi-metric between curves
#    "kind.of.kernel" the kernel function used for computing of 
#                     the kernel estimator; you can choose 
#                     "indicator", "triangle" or "quadratic (default)
#    "semimetric" character string allowing to choose the function 
#                 computing the semimetric;  you can select 
#                 "deriv" (default), "fourier", "hshift", "mplsr", 
#                 and "pca"
# Returns a list containing:
#    "Estimated.values" vector containing estimated reponses for 
#                        each curve of "CURVES"
#    "Predicted.values" if PRED different from CURVES, this vector 
#                       contains predicted responses for each 
#                       curve of PRED
#    "band" value of the current bandwidth
#    "Mse" mean squared error between estimated values and 
#          observed values
################################################################
        Response <- as.vector(Response)
	if(is.vector(PRED)) PRED <- as.matrix(t(PRED))
	testfordim <- sum(dim(CURVES)==dim(PRED))==2
	twodatasets <- T
	if(testfordim) twodatasets <- sum(CURVES==PRED)!=prod(dim(CURVES))
	sm <- get(paste("semimetric.", semimetric, sep = ""))
	if(semimetric == "mplsr")
		SEMIMETRIC1 <- sm(Response, CURVES, CURVES, ...)
	else SEMIMETRIC1 <- sm(CURVES, CURVES, ...)
	kernel <- get(kind.of.kernel)
	KERNEL1 <- kernel(SEMIMETRIC1/bandwidth)
	KERNEL1[KERNEL1 < 0] <- 0
	KERNEL1[KERNEL1 > 1] <- 0
        diag(KERNEL1) <- 0
	RESPKERNEL1 <- KERNEL1 * Response
	Denom1 <- apply(KERNEL1, 2, sum)
	if(sum(Denom1 == 0) > 0)
		stop(paste("try a greater bandwidth than ", bandwidth))
	Response.estimated <- apply(RESPKERNEL1, 2, sum)/Denom1
	Mse.estimated <- sum((Response.estimated - Response)^2)/length(Response
		)
	if(twodatasets) {
		if(semimetric == "mplsr")
			SEMIMETRIC2 <- sm(Response, CURVES, PRED, ...)
		else SEMIMETRIC2 <- sm(CURVES, PRED, ...)
		KERNEL2 <- kernel(SEMIMETRIC2/bandwidth)
		KERNEL2[KERNEL2 < 0] <- 0
		KERNEL2[KERNEL2 > 1] <- 0
		Denom2 <- apply(KERNEL2, 2, sum)
		if(sum(Denom2 == 0) > 0)
			stop(paste(
				"try a greater bandwidth \n                                                       than ",
				bandwidth))
		RESPKERNEL2 <- KERNEL2 * Response
		Response.predicted <- apply(RESPKERNEL2, 2, sum)/Denom2
		return(list(Estimated.values = Response.estimated, 
			Predicted.values = Response.predicted, band = bandwidth,
			Mse = Mse.estimated))
	}else {
		return(list(Estimated.values = Response.estimated, band = 
			bandwidth, Mse = Mse.estimated))
	}
}
#######