mplsr <- function(X, Y, K = 5)
{
# Copyright (c) October 1993, Mike Denham.
# Comments and Complaints to: snsdenhm@reading.ac.uk
#
# Orthogonal Scores Algorithm for PLS (Martens and Naes, pp. 121--123)
#
# X: predictors (matrix) 
#
# Y: multivariate response (matrix)
#
# K: The number of PLS factors in the model which must be less than or
#    equal to the  rank of X.
#
# Returned Value is the vector of PLS regression coefficients
#
	tol <- 1e-10
	X <- as.matrix(X)
	Y <- as.matrix(Y)
	dx <- dim(X)
	nbclass <- ncol(Y)
	xbar <- apply(X, 2, sum)/dx[1]
	ybar <- apply(Y, 2, sum)/dx[1]
	X0 <- X - outer(rep(1, dx[1]), xbar)
	Y0 <- Y - outer(rep(1, dx[1]), ybar)
	W <- matrix(0, dx[2], K)
	P <- matrix(0, dx[2], K)
	Q <- matrix(0, nbclass, K)
	sumofsquaresY <- apply(Y0^2, 2, sum)
	u <- Y0[, order(sumofsquaresY)[nbclass]]
	tee <- 0
	for(i in 1:K) {
		test <- 1 + tol
		while(test > tol) {
			w <- crossprod(X0, u)
			w <- w/sqrt(crossprod(w)[1])
			W[, i] <- w
			teenew <- X0 %*% w
			test <- sum((tee - teenew)^2)
			tee <- teenew
			cee <- crossprod(tee)[1]
			p <- crossprod(X0, (tee/cee))
			P[, i] <- p
			q <- crossprod(Y0, tee)[, 1]/cee
			u <- Y0 %*% q
			u <- u/crossprod(q)[1]
		}
		Q[, i] <- q
		X0 <- X0 - tee %*% t(p)
		Y0 <- Y0 - tee %*% t(q)
	}
	COEF <- W %*% solve(crossprod(P, W)) %*% t(Q)
	b0 <- ybar - t(COEF) %*% xbar
	list(b0 = b0, COEF = COEF)
}