funopare.knn.gcv <- function(Response, CURVES, PRED, ..., kind.of.kernel = "quadratic", semimetric = "deriv")
{
################################################################
# Performs functional prediction (regression) of a scalar response 
# from a sample of curves via the functional kernel estimator. 
# A global bandwidth (i.e. a number of neighbours) is selected by a 
# cross-validation procedure.
#    "Response" vector containing the observations of the scalar 
#               response
#    "CURVES" matrix containing the curves dataset (row by row) 
#             used for the estimating stage
#    "PRED" matrix containing new curves stored row by row
#           used for computing predictions
#    "..." arguments needed for the call of the function computing 
#          the semi-metric between curves
#    "kind.of.kernel" the kernel function used for computing of 
#                     the kernel estimator; you can choose 
#                     "indicator", "triangle" or "quadratic (default)
#    "semimetric" character string allowing to choose the function 
#                 computing the semimetric;  you can select 
#                 "deriv" (default), "fourier", "hshift", "mplsr", 
#                 and "pca"
# Returns a list containing:
#    "Estimated.values" vector containing estimated reponses for 
#                        each curve of "CURVES"
#    "Predicted.values" if PRED different from CURVES, this vector 
#                       contains predicted responses for each 
#                       curve of PRED
#    "Bandwidths" vector containing the global data-driven bandwidths  
#                 for each curve in the matrix "CURVES"
#    "knearest.opt" optimal number of neighbours
#    "Mse" mean squared error between estimated values and 
#          observed values
################################################################
        Response <- as.vector(Response)
	if(is.vector(PRED)) PRED <- as.matrix(t(PRED))
	testfordim <- sum(dim(CURVES)==dim(PRED))==2
	twodatasets <- T
	if(testfordim) twodatasets <- sum(CURVES==PRED)!=prod(dim(CURVES))
	sm <- get(paste("semimetric.", semimetric, sep = ""))
	if(semimetric == "mplsr")
		SEMIMETRIC1 <- sm(Response, CURVES, CURVES, ...)
	else SEMIMETRIC1 <- sm(CURVES, CURVES, ...)
	kernel <- get(kind.of.kernel)
	n1 <- ncol(SEMIMETRIC1)
	step <- ceiling(n1/100)
	if(step == 0)
		step <- 1
	Knearest <- seq(from = 10, to = n1 %/% 2, by = step)
	kmax <- max(Knearest)	
	# the vector Knearest contains the sequence of the 
# k-nearest neighbours used for computing the optimal bandwidth
	Response.estimated <- 0
	Bandwidth.opt <- 0
	HAT.RESP <- matrix(0, nrow = n1, ncol = length(Knearest))
	BANDWIDTH <- matrix(0, nrow = n1, ncol = kmax)
	for(i in 1:n1) {
		Norm.diff <- SEMIMETRIC1[, i]	
	# "norm.order" gives the sequence k_1, k_2,... such that
# dq(X_{k_1},X_i) < dq(X_{k_2},X_i) < ...
		Norm.order <- order(Norm.diff)	
	# "zz" contains dq(X_{k_2},X_i), dq(X_{k_3},X_i),..., 
# dq(X_{j_{kamx+2}},X_i)
		zz <- sort(Norm.diff)[2:(kmax + 2)]	
	# BANDWIDTH[i, l-1] contains (dq(X_{j_l},X_i) + 
# dq(X_{j_l},X_i))/2 for l=2,...,kmax+2
		BANDWIDTH[i,  ] <- 0.5 * (zz[-1] + zz[ - (kmax + 1)])
		z <- zz[ - (kmax + 1)]
		ZMAT <- matrix(rep(z, kmax), nrow = kmax, byrow = T)
		UMAT <- ZMAT/BANDWIDTH[i,  ]
		KMAT <- kernel(UMAT)
		KMAT[col(KMAT) > row(KMAT)] <- 0
		Ind.curves <- Norm.order[2:(kmax + 1)]
		Ind.resp <- Response[Ind.curves]
		YMAT <- matrix(rep(Ind.resp, kmax), nrow = kmax, byrow = T)
		HAT.RESP[i,  ] <- apply(YMAT[Knearest,  ] * KMAT[Knearest,  ], 
			1, sum)/apply(KMAT[Knearest,  ], 1, sum)
	}
	CRITERIUM <- (HAT.RESP - Response)^2
	Criterium <- apply(CRITERIUM, 2, sum)
	index.opt <- order(Criterium)[1]
	Response.estimated <- HAT.RESP[, index.opt]
	knearest.opt <- Knearest[index.opt]
	Bandwidth.opt <- BANDWIDTH[, knearest.opt]
	Mse.estimated <- sum((Response.estimated - Response)^2)/n1
	if(twodatasets) {
		if(semimetric == "mplsr")
			SEMIMETRIC2 <- sm(Response, CURVES, PRED, ...)
		else SEMIMETRIC2 <- sm(CURVES, PRED, ...)
		Bandwidth2 <- 0
		n2 <- ncol(SEMIMETRIC2)
		for(k in 1:n2) {
                        Sm2k <- SEMIMETRIC2[, k]
                        Bandwidth2[k] <- sum(sort(Sm2k)[knearest.opt:(knearest.opt+1)])*0.5
                }
		KERNEL <- kernel(t(t(SEMIMETRIC2)/Bandwidth2))
		KERNEL[KERNEL < 0] <- 0
		KERNEL[KERNEL > 1] <- 0
		Denom <- apply(KERNEL, 2, sum)
		RESPKERNEL <- KERNEL * Response
		Response.predicted <- apply(RESPKERNEL, 2, sum)/Denom
		return(list(Estimated.values = Response.estimated, 
			Predicted.values = Response.predicted, Bandwidths = 
			Bandwidth.opt, knearest.opt = knearest.opt, Mse = 
			Mse.estimated))
	}else {
		return(list(Estimated.values = Response.estimated, Bandwidths
			 = Bandwidth.opt, knearest.opt = knearest.opt, Mse = 
			Mse.estimated))
	}
}